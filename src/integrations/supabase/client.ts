// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import { Database } from '@/types/database';

// Use environment variables for security - NO FALLBACK VALUES
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

// Validate environment variables - FAIL FAST if not configured
if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  throw new Error(
    '‚ùå CR√çTICO: Variables de entorno de Supabase no configuradas.\n' +
    'Por favor, crea un archivo .env.local en la ra√≠z del proyecto con:\n' +
    'VITE_SUPABASE_URL=https://your-project.supabase.co\n' +
    'VITE_SUPABASE_ANON_KEY=your-anon-key\n' +
    '\nConsulta SECURITY_SETUP.md para m√°s informaci√≥n.'
  );
}

// Configuraci√≥n de producci√≥n para Supabase (OPTIMIZADA PARA MUCHOS USUARIOS)
const PRODUCTION_CONFIG = {
  // Configuraci√≥n de base de datos
  db: {
    timeout: parseInt(import.meta.env.VITE_SUPABASE_DB_TIMEOUT || '5000'), // 5 segundos - Balance UX/estabilidad
    retry: parseInt(import.meta.env.VITE_SUPABASE_RETRY_ATTEMPTS || '2'), // Solo 2 reintentos - Suficiente sin saturar
    retryDelay: parseInt(import.meta.env.VITE_SUPABASE_RETRY_DELAY || '2000'), // 2 segundos inicial - Backoff exponencial
    // maxConnections: Dejar que Supabase maneje autom√°ticamente para escalabilidad
  },
  // Configuraci√≥n de autenticaci√≥n
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
    flowType: 'pkce' // Usar PKCE para mayor seguridad
  },
  // Configuraci√≥n de red
  global: {
    headers: {
      'X-Client-Info': 'klamai-landing-launchpad',
      'X-Client-Version': '1.0.0'
    }
  }
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: PRODUCTION_CONFIG.auth,
  global: PRODUCTION_CONFIG.global,
  db: PRODUCTION_CONFIG.db
});

// Interceptor global para manejar errores de sesi√≥n inv√°lida
supabase.auth.onAuthStateChange((event, session) => {
  if (event === 'SIGNED_OUT') {
    // Limpiar cualquier estado persistente
    localStorage.removeItem('supabase.auth.token');
    sessionStorage.clear();
  }
});

// Funci√≥n para manejar errores de sesi√≥n inv√°lida
export const handleSessionError = (error: any) => {
  if (error?.message?.includes('session_not_found') || 
      error?.code === 'session_not_found' ||
      error?.message?.includes('JWT does not exist')) {
    
    console.log('Session invalid, signing out...');
    
    // Cerrar sesi√≥n autom√°ticamente
    supabase.auth.signOut().then(() => {
      // Redirigir al inicio
      if (typeof window !== 'undefined') {
        window.location.href = '/';
      }
    });
    
    return true; // Error manejado
  }
  
  return false; // Error no manejado
};

// Funci√≥n para manejar errores de red y timeouts
export const handleNetworkError = (error: any) => {
  // Log del error para debugging
  console.error('Network error:', error);
  
  // Si es un error de timeout
  if (error?.message?.includes('timeout') || error?.code === 'TIMEOUT') {
    console.warn('Request timeout - considerando retry autom√°tico');
    return { shouldRetry: true, delay: 2000 };
  }
  
  // Si es un error de red temporal
  if (error?.message?.includes('network') || error?.code === 'NETWORK_ERROR') {
    console.warn('Network error - considerando retry autom√°tico');
    return { shouldRetry: true, delay: 1000 };
  }
  
  // Para otros errores, no reintentar
  return { shouldRetry: false, delay: 0 };
};

// Funci√≥n para validar configuraci√≥n de producci√≥n
export const validateProductionConfig = () => {
  const isProduction = import.meta.env.PROD;
  
  if (isProduction) {
    console.log('üîí Configuraci√≥n de producci√≥n activada (OPTIMIZADA):');
    console.log(`- Timeout DB: ${PRODUCTION_CONFIG.db.timeout}ms (balanceado para UX)`);
    console.log(`- Retry attempts: ${PRODUCTION_CONFIG.db.retry} (suficiente sin saturar)`);
    console.log(`- Retry delay: ${PRODUCTION_CONFIG.db.retryDelay}ms (backoff exponencial)`);
    console.log(`- Max connections: Autom√°tico (escalabilidad)`);
  } else {
    console.log('Ô∏è Modo desarrollo - configuraciones de producci√≥n optimizadas disponibles');
  }
};

// Validar configuraci√≥n al cargar el m√≥dulo
validateProductionConfig();
import "jsr:@supabase/functions-js/edge-runtime.d.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";
import OpenAI from "https://deno.land/x/openai@v4.69.0/mod.ts";

// Configuraci√≥n de APIs
const HEYGEN_API_KEY = Deno.env.get('HEYGEN_API_KEY');
const HEYGEN_DEFAULT_AVATAR_ID = Deno.env.get('HEYGEN_DEFAULT_AVATAR_ID');
const HEYGEN_DEFAULT_VOICE_ID = Deno.env.get('HEYGEN_DEFAULT_VOICE_ID');

// Configuraci√≥n de Supabase
const SUPABASE_URL = Deno.env.get('SUPABASE_URL');
const SUPABASE_SERVICE_ROLE_KEY = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');
const SUPABASE_ANON_KEY = Deno.env.get('SUPABASE_ANON_KEY');

// Configuraci√≥n de OpenAI
const OPENAI_API_KEY = Deno.env.get('OPENAI_API_KEY');

// Configuraci√≥n del abogado principal
const LAWYER_NAME = Deno.env.get('LAWYER_NAME') || 'Jos√© Mar√≠a Escrib√°';

// Crear cliente de OpenAI
const openai = new OpenAI({
  apiKey: OPENAI_API_KEY || ''
});

// Crear cliente de Supabase
const supabase = createClient(SUPABASE_URL!, SUPABASE_SERVICE_ROLE_KEY!);

// Headers CORS
const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
  "Access-Control-Allow-Methods": "POST, OPTIONS",
};

// Interfaces TypeScript
interface CaseIntroRequest {
  caso_id: string;
  phone_number?: string;
}

interface CaseData {
  id: string;
  titulo: string;
  descripcion: string;
  cliente_nombre: string;
  estado: string;
  created_at: string;
  cliente_telefono?: string;
}

interface VideoGenerationResponse {
  success: boolean;
  video_id?: string;
  status?: string;
  video_url?: string;
  error?: string;
}

interface WhatsAppResponse {
  success: boolean;
  message_id?: string;
  error?: string;
}

// Funci√≥n principal
Deno.serve(async (req: Request) => {
  // Manejar CORS
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    // Solo permitir POST
    if (req.method !== 'POST') {
      return new Response(
        JSON.stringify({ error: 'M√©todo no permitido. Use POST.' }),
        { status: 405, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // Verificar configuraciones requeridas
    if (!HEYGEN_API_KEY || !SUPABASE_URL || !SUPABASE_SERVICE_ROLE_KEY || !SUPABASE_ANON_KEY) {
      const missing = [];
      if (!HEYGEN_API_KEY) missing.push('HEYGEN_API_KEY');
      if (!SUPABASE_URL) missing.push('SUPABASE_URL');
      if (!SUPABASE_SERVICE_ROLE_KEY) missing.push('SUPABASE_SERVICE_ROLE_KEY');
      if (!SUPABASE_ANON_KEY) missing.push('SUPABASE_ANON_KEY');

      return new Response(
        JSON.stringify({
          error: 'Configuraci√≥n incompleta',
          details: `Faltan secrets: ${missing.join(', ')}`
        }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // Parsear request
    let requestBody;
    try {
      requestBody = await req.json();
      console.log('üì• Request body recibido:', JSON.stringify(requestBody, null, 2));
    } catch (parseError) {
      console.error('‚ùå Error parseando JSON del request:', parseError);
      return new Response(
        JSON.stringify({
          error: 'JSON inv√°lido en el request',
          details: parseError.message
        }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const { caso_id, phone_number }: CaseIntroRequest = requestBody;

    if (!caso_id) {
      return new Response(
        JSON.stringify({
          error: 'caso_id es requerido'
        }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    console.log(`üöÄ Iniciando proceso para caso: ${caso_id}`);

    // 1. Obtener datos del caso desde la tabla 'casos'
    console.log(`üìã Paso 1: Obteniendo datos del caso...`);
    const caseData = await getCaseData(caso_id);
    if (!caseData) {
      return new Response(
        JSON.stringify({ error: 'Caso no encontrado en la tabla casos' }),
        { status: 404, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    console.log(`‚úÖ Caso encontrado: "${caseData.titulo}" para cliente: ${caseData.cliente_nombre}`);

    // 2. Generar texto personalizado
    console.log(`üìù Paso 2: Generando texto personalizado...`);
    const personalizedText = await generatePersonalizedText(caseData);
    console.log(`‚úÖ Texto generado (${personalizedText.length} caracteres)`);

    // 3. Generar video con HeyGen
    console.log(`üé¨ Paso 3: Generando video con HeyGen...`);
    const videoResult = await generateHeyGenVideo(personalizedText);

    if (!videoResult.success || !videoResult.video_id) {
      return new Response(
        JSON.stringify({
          error: 'Error generando video',
          details: videoResult.error
        }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    console.log(`‚úÖ Video iniciado - ID: ${videoResult.video_id}`);

    // 4. Esperar a que el video est√© listo
    console.log(`‚è≥ Paso 4: Esperando a que el video est√© listo...`);
    const finalVideoUrl = await pollVideoStatus(videoResult.video_id);

    if (!finalVideoUrl) {
      return new Response(
        JSON.stringify({
          error: 'El video no se complet√≥ en el tiempo esperado',
          video_id: videoResult.video_id
        }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    console.log(`‚úÖ Video completado - URL: ${finalVideoUrl}`);

    // 5. Enviar video por WhatsApp
    const phoneToUse = phone_number || caseData.cliente_telefono;
    let whatsappResult = null;

    if (phoneToUse) {
      console.log(`üì± Paso 5: Enviando video por WhatsApp a: ${phoneToUse}`);
      whatsappResult = await sendVideoWhatsApp(phoneToUse, finalVideoUrl, caseData);

      if (whatsappResult.success) {
        console.log(`‚úÖ Video enviado exitosamente por WhatsApp`);
      } else {
        console.error(`‚ùå Error enviando WhatsApp: ${whatsappResult.error}`);
      }
    } else {
      console.log(`‚ö†Ô∏è No se proporcion√≥ n√∫mero de tel√©fono para WhatsApp`);
    }

    // 6. Respuesta final
    const response = {
      success: true,
      caso_id,
      case_title: caseData.titulo,
      client_name: caseData.cliente_nombre,
      steps_completed: {
        case_data_retrieved: true,
        text_generated: true,
        video_generated: true,
        video_completed: true,
        whatsapp_sent: !!whatsappResult?.success
      },
      data: {
        personalized_text: personalizedText,
        video_id: videoResult.video_id,
        video_url: finalVideoUrl,
        whatsapp_recipient: phoneToUse,
        whatsapp_result: whatsappResult
      },
      message: whatsappResult?.success
        ? 'Video generado y enviado por WhatsApp exitosamente'
        : 'Video generado exitosamente (sin env√≠o WhatsApp)'
    };

    console.log(`üéâ Proceso completado exitosamente para caso ${caso_id}`);

    return new Response(
      JSON.stringify(response),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('‚ùå Error en generate-case-intro-video:', error);
    return new Response(
      JSON.stringify({
        error: 'Error interno del servidor',
        details: error.message
      }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
});

// Funci√≥n para obtener datos del caso SOLO de la tabla 'casos'
async function getCaseData(casoId: string): Promise<CaseData | null> {
  try {
    console.log(`üîç Consultando caso ${casoId} en tabla 'casos'...`);

    const { data: caso, error: casoError } = await supabase
      .from('casos')
      .select('*')
      .eq('id', casoId)
      .single();

    if (casoError) {
      console.error(`‚ùå Error consultando caso ${casoId}:`, casoError);
      
      if (casoError.code === 'PGRST116') {
        console.log(`‚ùå Caso ${casoId} no existe en la tabla 'casos'`);
        return null;
      }
      
      throw casoError;
    }

    if (!caso) {
      console.log(`‚ùå Caso ${casoId} no encontrado`);
      return null;
    }

    console.log(`‚úÖ Caso encontrado:`, {
      id: caso.id,
      titulo: caso.motivo_consulta,
      cliente: `${caso.nombre_borrador} ${caso.apellido_borrador || ''}`.trim(),
      estado: caso.estado
    });

    // Mapear los datos del caso al formato esperado
    return {
      id: caso.id,
      titulo: caso.motivo_consulta || 'Caso sin t√≠tulo',
      descripcion: caso.resumen_caso || 'Sin descripci√≥n',
      cliente_nombre: `${caso.nombre_borrador} ${caso.apellido_borrador || ''}`.trim() || 'Cliente sin nombre',
      estado: caso.estado || 'desconocido',
      created_at: caso.created_at || new Date().toISOString(),
      cliente_telefono: caso.telefono_borrador
    };

  } catch (error) {
    console.error('‚ùå Error obteniendo datos del caso:', error);
    return null;
  }
}

// Funci√≥n para generar texto personalizado con OpenAI
async function generatePersonalizedText(caseData: CaseData): Promise<string> {
  try {
    if (!OPENAI_API_KEY) {
      console.log('‚ö†Ô∏è OpenAI no configurado, usando texto por defecto');
      return generateFallbackText(caseData);
    }

    // Crear el prompt para OpenAI
    const prompt = `Genera un texto corto y personalizado (m√°ximo 150 palabras) para un video introductorio de un abogado.

Contexto del caso:
- Cliente: ${caseData.cliente_nombre}
- Abogado: ${LAWYER_NAME}
- Tipo de caso: ${caseData.titulo}
- Descripci√≥n: ${caseData.descripcion}
- Estado: ${caseData.estado}

El texto debe:
1. Saludar personalmente al cliente mencionando el nombre del abogado
2. Presentarse como ${LAWYER_NAME} de Klamai
3. Mencionar que estamos trabajando en su caso espec√≠fico
4. Transmitir confianza y profesionalismo
5. Mencionar que prepararemos un an√°lisis y presupuesto
6. Ser corto (30-45 segundos de video)
7. Tener un tono c√°lido y confiable
8. Terminar con una despedida profesional

Genera solo el texto que dir√° el abogado en el video, sin explicaciones adicionales.`;

    // Llamar a OpenAI
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        { role: "system", content: "Eres un asistente especializado en generar textos profesionales para abogados. Genera textos concisos, c√°lidos y profesionales." },
        { role: "user", content: prompt }
      ],
      max_tokens: 300,
      temperature: 0.7
    });

    const generatedText = completion.choices[0]?.message?.content?.trim();
    
    if (generatedText) {
      console.log(`‚úÖ Texto generado con OpenAI (${generatedText.length} caracteres)`);
      return generatedText;
    } else {
      console.log('‚ö†Ô∏è OpenAI no gener√≥ texto, usando fallback');
      return generateFallbackText(caseData);
    }

  } catch (error) {
    console.error('‚ùå Error generando texto con OpenAI:', error);
    console.log('‚ö†Ô∏è Usando texto fallback debido al error');
    return generateFallbackText(caseData);
  }
}

// Funci√≥n fallback para cuando OpenAI no est√° disponible
function generateFallbackText(caseData: CaseData): string {
  console.log('üìù Generando texto fallback con nombre del abogado...');

  const textoFallback = `Hola ${caseData.cliente_nombre}.

Soy ${LAWYER_NAME}, abogado principal de Klamai, y quiero saludarte personalmente.

He revisado tu caso "${caseData.titulo}" y me complace decirte que ya estamos trabajando activamente en √©l.

Estoy preparando un an√°lisis detallado y un presupuesto personalizado que te enviar√© muy pronto.

Tenemos un equipo legal altamente experimentado listo para ayudarte. Te mantendr√© informado de cada avance.

Gracias por elegir Klamai. Estamos aqu√≠ para apoyarte.

Atentamente,
${LAWYER_NAME}
Abogado Principal de Klamai`;

  return textoFallback;
}

// Funci√≥n para generar video con HeyGen (usando la estructura que funciona)
async function generateHeyGenVideo(text: string): Promise<VideoGenerationResponse> {
  try {
    const response = await fetch('https://api.heygen.com/v2/video/generate', {
      method: 'POST',
      headers: {
        'X-Api-Key': HEYGEN_API_KEY!,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        video_inputs: [
          {
            character: {
              type: "avatar",
              avatar_id: HEYGEN_DEFAULT_AVATAR_ID || "Lina_Dress_Sitting_Side_public",
              avatar_style: "normal"
            },
            voice: {
              type: "text",
              input_text: text,
              voice_id: HEYGEN_DEFAULT_VOICE_ID || "119caed25533477ba63822d5d1552d25",
              speed: 1.0
            }
          }
        ],
        dimension: {
          width: 1280,
          height: 720
        }
      })
    });

    if (!response.ok) {
      const errorData = await response.text();
      throw new Error(`Error HeyGen API: ${response.status} - ${errorData}`);
    }

    const data = await response.json();
    console.log('üîç Respuesta completa de HeyGen:', JSON.stringify(data, null, 2));
    
    if (!data.data || !data.data.video_id) {
      console.error('‚ùå Estructura de respuesta inv√°lida:', data);
      throw new Error('Respuesta inv√°lida de HeyGen API - falta data.video_id');
    }

    console.log(`‚úÖ Video iniciado correctamente - ID: ${data.data.video_id}`);
    return {
      success: true,
      video_id: data.data.video_id,
      status: 'processing',
      message: 'Video en proceso de generaci√≥n'
    };

  } catch (error) {
    console.error('‚ùå Error generando video con HeyGen:', error);
    console.error('‚ùå Tipo de error:', typeof error);
    console.error('‚ùå Stack trace:', error.stack);
    return {
      success: false,
      error: error.message || String(error)
    };
  }
}

// Funci√≥n para verificar el estado del video (usando la estructura que funciona)
async function checkVideoStatus(videoId: string): Promise<VideoGenerationResponse> {
  try {
    const response = await fetch(`https://api.heygen.com/v1/video_status.get?video_id=${videoId}`, {
      headers: {
        'X-Api-Key': HEYGEN_API_KEY!,
        'Accept': 'application/json'
      }
    });

    if (!response.ok) {
      throw new Error(`Error verificando estado: ${response.status}`);
    }

    const data = await response.json();
    
    if (data.data.status === 'completed') {
      return {
        success: true,
        status: 'completed',
        video_url: data.data.video_url
      };
    } else if (data.data.status === 'failed') {
      return {
        success: false,
        status: 'failed',
        error: 'La generaci√≥n del video fall√≥'
      };
    } else {
      return {
        success: true,
        status: data.data.status,
        message: 'Video a√∫n en proceso'
      };
    }

  } catch (error) {
    console.error('‚ùå Error verificando estado del video:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

// Funci√≥n para esperar a que el video est√© listo
async function pollVideoStatus(videoId: string): Promise<string | null> {
  const maxAttempts = 30; // M√°ximo 5 minutos (30 * 10 segundos)
  let attempts = 0;

  console.log(`‚è≥ Iniciando polling para video ${videoId}...`);

  while (attempts < maxAttempts) {
    try {
      console.log(`üîÑ Intento ${attempts + 1}/${maxAttempts} - Verificando estado...`);
      
      const statusResult = await checkVideoStatus(videoId);
      
      if (!statusResult.success) {
        console.error(`‚ùå Error en intento ${attempts + 1}:`, statusResult.error);
        attempts++;
        continue;
      }

      const status = statusResult.status;
      console.log(`üìä Estado del video: ${status}`);

      if (status === 'completed' && statusResult.video_url) {
        console.log(`‚úÖ Video completado exitosamente`);
        return statusResult.video_url;
      }

      if (status === 'failed') {
        throw new Error('La generaci√≥n del video fall√≥');
      }

      if (status === 'processing' || status === 'pending') {
        console.log(`‚è≥ Video a√∫n en proceso, esperando...`);
      }

      // Esperar 10 segundos antes del siguiente intento
      await new Promise(resolve => setTimeout(resolve, 10000));
      attempts++;

    } catch (error) {
      console.error(`Error en intento ${attempts + 1}:`, error);
      attempts++;
      if (attempts >= maxAttempts) {
        throw new Error('Tiempo de espera agotado para la generaci√≥n del video');
      }
    }
  }

  throw new Error('Tiempo de espera agotado para la generaci√≥n del video');
}

// Funci√≥n para enviar video por WhatsApp usando el patr√≥n correcto
async function sendVideoWhatsApp(phoneNumber: string, videoUrl: string, caseData: CaseData): Promise<WhatsAppResponse> {
  try {
    console.log(`üì± Enviando video por WhatsApp a ${phoneNumber}...`);

    // Preparar el mensaje de WhatsApp con el nombre del abogado real
    const mensajeWhatsApp = `¬°Hola! Soy ${LAWYER_NAME}, tu abogado de Klamai.

Te env√≠o este video personalizado sobre tu caso "${caseData.titulo}".

Estamos trabajando activamente para resolverlo. Te mantendr√© informado de cada avance.

Si tienes alguna pregunta, no dudes en contactarme.

Atentamente,
${LAWYER_NAME}
Abogado Principal de Klamai`;

    console.log(`üìù Mensaje preparado:`, mensajeWhatsApp);

    // Usar el patr√≥n correcto como en otras funciones que funcionan
    const { data: wsData, error: wsError } = await supabase.functions.invoke("send-whatsapp", {
      body: {
        tipo: 'media',
        numero: phoneNumber,
        url_media: videoUrl,
        mediatype: 'video',
        mimetype: 'video/mp4',
        caption: mensajeWhatsApp,
        fileName: `video-caso-${caseData.id}.mp4`
      }
    });

    if (wsError) {
      console.error(`‚ùå Error invocando funci√≥n WhatsApp:`, wsError);
      return {
        success: false,
        error: `Error de invocaci√≥n: ${wsError.message || wsError}`
      };
    }

    if (wsData && (wsData as any).error) {
      console.error(`‚ùå Error en respuesta de WhatsApp:`, (wsData as any).error);
      return {
        success: false,
        error: (wsData as any).error
      };
    }

    console.log(`‚úÖ Video enviado exitosamente por WhatsApp`);
    console.log(`üìä Detalles WhatsApp:`, wsData);

    return {
      success: true,
      message_id: (wsData as any)?.id || (wsData as any)?.message_id,
      message: 'Video enviado por WhatsApp correctamente'
    };

  } catch (error) {
    console.error('‚ùå Error enviando video por WhatsApp:', error);
    return {
      success: false,
      error: error.message
    };
  }
}